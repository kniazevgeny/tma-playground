import{H3Event as p,getRequestURL as g,getRequestWebStream as P,eventHandler as _}from"h3";import{getContext as b}from"unctx";import{AsyncLocalStorage as w}from"node:async_hooks";function R(t){let o;const e=m(t),a={duplex:"half",method:t.method,headers:t.headers};return t.node.req.body instanceof ArrayBuffer?new Request(e,{...a,body:t.node.req.body}):new Request(e,{...a,get body(){return o||(o=E(t),o)}})}function x(t){return t.web??={request:R(t),url:m(t)},t.web.request}function T(){return A()}const d=Symbol("$HTTPEvent");function S(t){return typeof t=="object"&&(t instanceof p||t?.[d]instanceof p||t?.__is_event__===!0)}function y(t){return function(...o){let e=o[0];if(S(e))o[0]=e instanceof p||e.__is_event__?e:e[d];else{if(!globalThis.app.config.server.experimental?.asyncContext)throw new Error("AsyncLocalStorage was not enabled. Use the `server.experimental.asyncContext: true` option in your app configuration to enable it. Or, pass the instance of HTTPEvent that you have as the first argument to the function.");if(e=T(),!e)throw new Error("No HTTPEvent found in AsyncLocalStorage. Make sure you are using the function within the server runtime.");o.unshift(e)}return t(...o)}}const m=y(g),E=y(P);function v(){return b("nitro-app",{asyncContext:!!globalThis.app.config.server.experimental?.asyncContext,AsyncLocalStorage:w})}function A(){return v().use().event}const H=[{path:"/deferred",filePath:"D:/Files/playground/tma-playground/web/app/routes/deferred.tsx"},{path:"/",filePath:"D:/Files/playground/tma-playground/web/app/routes/index.tsx"},{path:"/_layout",filePath:"D:/Files/playground/tma-playground/web/app/routes/_layout.tsx"},{path:"/__root",filePath:"D:/Files/playground/tma-playground/web/app/routes/__root.tsx"},{path:"/_layout/_layout-2",filePath:"D:/Files/playground/tma-playground/web/app/routes/_layout/_layout-2.tsx"},{path:"/_layout/_layout-2/layout-a",filePath:"D:/Files/playground/tma-playground/web/app/routes/_layout/_layout-2/layout-a.tsx"},{path:"/_layout/_layout-2/layout-b",filePath:"D:/Files/playground/tma-playground/web/app/routes/_layout/_layout-2/layout-b.tsx"}],q=["GET","POST","PUT","PATCH","DELETE","OPTIONS","HEAD"];function F(t){return _(async o=>{const e=x(o);return await t({request:e})})}function D(t,o){const e=t.pathname.split("/").filter(Boolean),a=o.sort((r,n)=>{const s=r.routePath.split("/").filter(Boolean);return n.routePath.split("/").filter(Boolean).length-s.length}).filter(r=>{const n=r.routePath.split("/").filter(Boolean);return e.length>=n.length});for(const r of a){const n=r.routePath.split("/").filter(Boolean),s={};let u=!0;for(let l=0;l<n.length;l++){const c=n[l],f=e[l];if(c.startsWith("$"))if(c==="$"){const i=e.slice(l).join("/");if(i!=="")s["*"]=i,s._splat=i;else{u=!1;break}}else{const i=c.slice(1);s[i]=f}else if(c!==f){u=!1;break}}if(u)return{routePath:r.routePath,params:s,payload:r.payload}}}const h=H.filter(t=>t.$APIRoute);function $(t){const o=[];return t.forEach(e=>{const r=e.path.split("/").filter(Boolean).map(n=>n==="*splat"?"$":n.startsWith(":$")&&n.endsWith("?")?n.slice(1,-1):n).join("/");o.push({routePath:`/${r}`,payload:e})}),o}const C=async({request:t})=>{if(!h.length)return new Response("No routes found",{status:404});if(!q.includes(t.method))return new Response("Method not allowed",{status:405});const o=$(h),e=new URL(t.url,"http://localhost:3000"),a=D(e,o);if(!a)return new Response("Not found",{status:404});let r;try{r=await a.payload.$APIRoute.import().then(u=>u.APIRoute)}catch(u){return console.error("Error importing route file:",u),new Response("Internal server error",{status:500})}if(!r)return new Response("Internal server error",{status:500});const n=t.method,s=r.methods[n];return s?await s({request:t,params:a.params}):new Response("Method not allowed",{status:405})},L=F(C);export{L as default};
